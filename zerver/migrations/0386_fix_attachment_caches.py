# Generated by Django 3.2.12 on 2022-03-23 04:32

from django.db import migrations, models
from django.db.backends.postgresql.schema import DatabaseSchemaEditor
from django.db.migrations.state import StateApps
from django.db.models import Model


def fix_attachment_caches(apps: StateApps, schema_editor: DatabaseSchemaEditor) -> None:
    Attachment = apps.get_model("zerver", "Attachment")
    ArchivedAttachment = apps.get_model("zerver", "ArchivedAttachment")
    Stream = apps.get_model("zerver", "Stream")

    BATCH_SIZE = 10000

    def update_batch(attachment_model: Model, lower_bound: int) -> None:
        attachments_to_update = []
        for attachment in attachment_model.objects.filter(
            id__gt=lower_bound, id__lte=lower_bound + BATCH_SIZE
        ):
            is_web_public = Stream.objects.filter(
                realm=attachment.realm,
                invite_only=False,
                is_web_public=True,
                recipient__in=attachment.messages.values("recipient"),
            ).exists()

            is_realm_public = Stream.objects.filter(
                realm=attachment.realm,
                invite_only=False,
                recipient__in=attachment.messages.values("recipient"),
            ).exists()

            if (
                is_realm_public == attachment.is_realm_public
                and is_web_public == attachment.is_web_public
            ):
                continue

            attachment.is_realm_public = is_realm_public
            attachment.is_web_public = is_web_public
            attachments_to_update.append(attachment)

        attachment_model.objects.bulk_update(
            attachments_to_update, ["is_realm_public", "is_web_public"]
        )

    max_id = Attachment.objects.aggregate(models.Max("id"))["id__max"]
    if max_id is None:
        # Nothing to do if there are not attachments yet
        return

    lower_bound = 0

    while lower_bound < max_id:
        print(f"Processed {lower_bound}/{max_id} attachments.")
        update_batch(Attachment, lower_bound)
        update_batch(ArchivedAttachment, lower_bound)
        lower_bound += BATCH_SIZE


class Migration(migrations.Migration):
    atomic = False

    dependencies = [
        ("zerver", "0385_attachment_flags_cache"),
    ]

    operations = [
        migrations.RunPython(fix_attachment_caches, reverse_code=migrations.RunPython.noop),
    ]
